//****************************************************************************
//  Author: Randy Obringer
//  Email: ro120908@ohio.edu
//
//  Program: main.cc
//
//  Description: Creates a graph in vector<string> format. Find the shortest path 
//		to the edge of the graph representing an escape route. Show the selected 
//		path by replacing the values with a '+'
//
//  Last Updated: 5/28/2011
//
//****************************************************************************
#include "EscapeTheMaze.h"

int main(){
  /*vector<string> maze;
  maze.push_back("*8*");
  maze.push_back("547");
  maze.push_back("*6*");
  
  EscapeTheMaze E;

  int a=E.lengthShortestExit(maze,1,1);
  vector<string> smaze=E.shortestExit(maze,1,1);
  cout << a << endl;
  
  vector<string>::iterator it;
  for(it=smaze.begin();it!=smaze.end();++it){
    cout << *it << endl;
  }
  cout << endl;
  cout << endl;
  vector<string> maze2;
  EscapeTheMaze S;
  maze2.push_back("********************************************************");
  maze2.push_back("*36753562912**7093606261879**20237592289736129**********");
  maze2.push_back("*3*********1**9**4***********7***************8********4*");
  maze2.push_back("*5*********0**3**6***********1*****0632061***5**5*4***7*");
  maze2.push_back("*6*********5**6**9374525474**4*****3*****0***7**8*6***8*");
  maze2.push_back("84*********3**************1**4*****9*****2***0**6*8***9*");
  maze2.push_back("***********2**************6**6*****4*********9**5*0***4*");
  maze2.push_back("***********8**************7**1*****72722610615**949***0*");
  maze2.push_back("***********9**1771159776736**5***************6********3*");
  maze2.push_back("***********9*****************4***************8********1*");
  maze2.push_back("***********2939088509638561159***************8481030444*");
  maze2.push_back("********************************************************");

  a=S.lengthShortestExit(maze2,1,15);
  smaze=S.shortestExit(maze2,1,15);
  cout << a << endl;
  
  for(it=smaze.begin();it!=smaze.end();++it){
    cout << *it << endl;
  }

  //cout << maze[11][55] << endl;
  vector<string>::iterator it;
  vector<string> maze3;
  EscapeTheMaze D;
  maze3.push_back("********************5***0*******7*******************************");
  maze3.push_back("********************3***6*******1*******************************");
  maze3.push_back("********************4***3602****6*******************************");
  maze3.push_back("********************3******8****7*******************************");
  maze3.push_back("********************1955***7*2002*******************************");
  maze3.push_back("***********************786*0*0**********************************");
  maze3.push_back("***********************5*7*6*7*************************416769361");
  maze3.push_back("***********************911841**************************3********");
  maze3.push_back("9069289279**********24*****8***************************0********");
  maze3.push_back("*********4***********4*****2***************************0********");
  maze3.push_back("*********2097627967371599619538675489909300082990747098969034102");
  maze3.push_back("*********************6*****6****************************0*******");
  maze3.push_back("*********5706028102213*****9****************************5*******");
  maze3.push_back("*********2****9************71032187209071***************76337530");
  maze3.push_back("7528825132****2***********************476763*************9******");
  maze3.push_back("**************8***********************4*1**7*************5******");
  maze3.push_back("**************8***********************4*8**335632172018352******");
  maze3.push_back("*********790388796**************1049887*3***********************");
  maze3.push_back("*********1****3**9**************6*******7***********************");
  maze3.push_back("*********0****3**2**************2*******525044168***************");
  maze3.push_back("*********9****4**7**************8***************3***************");
  maze3.push_back("*********8****0**7**************9***************8***************");
  maze3.push_back("*********7****7**1**************8***************2***************");

  int a=D.lengthShortestExit(maze3,10,27);
  vector<string> smaze=D.shortestExit(maze3,10,27);
  cout << a << endl;
  
  for(it=smaze.begin();it!=smaze.end();++it){
    cout << *it << endl;
  }*/
  vector<string> maze;
  maze.push_back("**************************************************************");
  maze.push_back("*8*8*888888888888888888888888888888888*88**88888888888888*88**");
  maze.push_back("*8*8*8***************8************8**8**8*88***8********8**888");
  maze.push_back("*8*8*8*88*888888888888*8888888888*8*88*8888**8*8*888888*8*88**");
  maze.push_back("*8888888**8*****8***8*****8*******8*8**8**8*88*8*8****8*8*8***");
  maze.push_back("*8*8******8*888*8*8*8*88888*8888888*8888*****8*8*8888*888*8*8*");
  maze.push_back("*8*8*8888****8****8***8******8*********8888888*8****8*****8*8*");
  maze.push_back("*8*8*8**8888888888888*8*888888*8888888*********8*8*888888*8*8*");
  maze.push_back("*8***8****************8***8*********8**888888888*8**8*8*8*8*8*");
  maze.push_back("*8*888888888888888888*88888*8888888*8************8********8*8*");
  maze.push_back("*8*************8****8***********8*8*888888888888888888888*8*8*");
  maze.push_back("*8888888888888*8*8888888888888888*8*8************8********8*8*");
  maze.push_back("*************8*8********************8*888888**8**8888888888*8*");
  maze.push_back("*888888888888888888888888888888888888*8****8888888*8*8*8**888*");
  maze.push_back("**************************************************************");
  EscapeTheMaze X;
  //int a=X.lengthShortestExit(maze,1,1);
  vector<string> tempmaze=X.shortestExit(maze,1,1);
  vector<string>::iterator it;
  cout << endl;
  for(it=tempmaze.begin();it!=tempmaze.end();++it){
    cout << *it << endl;
  }
}
